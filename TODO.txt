KEY:
! means important.
~ means in progress.
> means completed.
X means rejected.

TODO - Basic
    > ! - Loops in user settings (delete more than one user)
    > - Edit username and password
    > - User-specific notes and game progress
    > ! - Merge shutdown and hibernate (since they share a lot of root code)
    > - Fix imports
    > ! - Add shutdown, hibernate, and sleep options on shutdown menu
    > - Add user-specific app status (app sessions)
    > - Change status dictionary
    > - Change current user status to boolean
    > ! - Fix add user with game progress
    > ! - Fix restarting!
    > - Delete all aesthetic pauses in shutdown function
    > - Do loading animation for all aesthetic pauses in all files!!!!

TODO - Advanced
    > ! - Add admins and standard users.
    > - Request password before deleting user (then remove the check for admin users)
    > - Add 3 recently deleted users
        - Add log of who deleted who
    > - Event Log
        > - Basically keeps track of every event that happens in the computer.
        > - It will also be accessible using an app: Event Viewer
            > - Event Viewer will basically show chunks of events based on time.
                > - This chunk is calculated if the gap between logged events is greater than 10 minutes.
            > - There will be a reset function in the app as well.
    > ! - Rewrite Shutdown function entirely
        > - Explicitly write conditions for all shutdown methods
    > - Add a lockout for _ number of incorrect passwords.
    > - Add speed up or slow down to program
    > ! - Comprehensive app screen
        > - Categories! Apps, utilities, games, power
        > - Admin specific apps, standard users cannot see them
    > ! - Rework startup method completely
    > - Add parent-child hierarchy
    X ! - Encrypt typed password - REJECTED. This turned out to be a LOT harder than I thought. I seriously have no idea how this works.
    > - Rework Cerberus.py into operating_system.py
        I just figured out that restart actually does nothing! It's supposed to shut down the OS and read from disk storage again from scratch... But it doesn't...
        New function: boot. Boot will read everything from disk storage. Basically what goes on in Cerberus.py now goes
        into a function in operating_system. The goal is to just have the while loop and public variables in Cerberus.py
        > ! - Fix Guest User!
        > ! - Fix Reset
        > - Move reading code into boot function!
        > - Encrypt db_protected.txt using Fernet or Caesar Cypher
    - Spreadsheet app???
    > ! - Savable user-specific games, similar to notepad. Every game gets the treatment!
    - Add debug mode. Documentation Below.
    > - Add Sonar.

TODO - Really advanced
    - Add user personalization. See documentation below.
    - Add a game store. I'll add some documentation below.
    ~ - Implement hashing (encrypting the databases)
        - Error Correction in databases.
        - Develop error correcting app after implementing encryption. More documentation below.
    - Implement Threads
    ~ - Revamp db_unprotected.txt into user directories. More documentation below.
        ~ - Completely revamp Notes app. See below for documentation.
            - Add editing functionality.
    - Make the saved_state actually do something (and revamp task manager with it)

Administrators:
- Admins have elevated access that allow for certain functions. These include:
    - Creating new Users
    - Managing Users
        - Deleting
        - Editing other user info (not current user info)
    - Resetting the OS
    - Installing games (future)
    - Debug mode

Debug Mode:
Finally, let's write the documentation. This has been an idea too long.
- Basically shows a bunch of debug info, like:
    - System versions
    - User inputs
    - Code line number
    - Any exception
        - The opportunity to go back to the line of code, etc.

Game store:
- This is a collection of games that the user can install.
- Saving game progress will no longer be hardcoded with this addition.
X Each game will be iterated through and the individual user progress will be written to the database.
    X - Each game will now have game files, so no more saving through shutdown.
- Each game will also be completely internalized. Every parameter given to __init__ and boot are literals, no objects.
- This is going to be really hard.

Hashing:
- Essentially encrypting the databases.
- This will prevent tampering with the saved data.
- Error correction (SCRAPPED):
    - If the data becomes corrupted from an unexpected shutdown or something, an error correcting app will be launched on the next startup.
    - The user will also be able to launch this if they believe the OS is corrupt.
    - This will do 2 things: Error check the encrypted databases, and error check the entire root code. Think Disk Check or Recovery Tools for Windows.
    - The function call will replace the corruption error message being displayed during startup with corrupted databases.
    - This will probably be even harder than the Game store.
- New Error correction:
    - Essentially, this will provide a comprehensive error report of what happened, possible causes, and how to fix it.

New user directories:
- Each user will get their own dedicated directory.
- Upon deletion or username edits, the user directory will be changed as well.
- This directory will now store whatever was in db_unprotected.txt. This includes game progress.
- Each game will be in its own notepad file.
    - New Notepad:
        - Basically, the user can create txt files at will, in their own directory.
        - The files will be read from storage into memory, and will be editable and savable.
        - Saving txt files will be completely different from shutdown.

User Personalization:
- Users can change the color of the background, the color of the text, perhaps even the language????
- Completely new app.
- Could spark the change from separate settings apps to a central Settings app!
